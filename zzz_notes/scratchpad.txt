
File Structure Idea

MyGame/
├── project.godot
├── .import/                 # auto-generated by Godot
├── .godot/                  # settings & editor state
├── addons/
├── assets/
│   ├── textures/
│   ├── sprites/
│   ├── audio/
│   ├── materials/
│   └── fonts/
├── scenes/
│   ├── UI/
│   ├── Levels/
│   ├── Characters/
│   └── Effects/
├── scripts/
│   ├── ai/
│   ├── controllers/
│   ├── data/                # JSON/Tres data loaders
│   ├── entities/
│   ├── managers/
│   └── ui/
├── shaders/
│   ├── lighting/
│   └── post_processing/
├── tools/                   # editor scripts (EditorPlugin)
├── thirdparty/              # external libraries, e.g. GDNative libs
├── tests/                   # unit & integration tests
├── docs/                    # design docs, art briefs
└── ci/                      # CI/CD scripts & configs


Piece Movement

1) Store the coordinate on the Piece itself
Have each Piece instance carry a board_pos: Vector2i that you set whenever you spawn or move it. Then emit that as part of the signal.

Piece.gd
gdscript
Copy
Edit
extends Node3D
class_name Piece

signal clicked(piece: Piece, board_pos: Vector2i)

# this gets set by Board when you spawn or move the piece
var board_pos: Vector2i

func _ready():
	# for example, detect clicks via the mesh’s input event
	$CollisionShape3D.input_event.connect(self, "_on_input_event")

func _on_input_event(camera, event, position, normal, shape_idx):
	if event is InputEventMouseButton and event.pressed:
		emit_signal("clicked", self, board_pos)
Board.gd (when you spawn/move)
gdscript
Copy
Edit
# whenever you place a piece at coord:
p.board_pos = coord
# …and when you move it:
p.board_pos = to_coord
GameManager.gd
gdscript
Copy
Edit
extends Node

@onready var board := $Board

func _ready():
	# connect all existing pieces
	for p in board.get_tree().get_nodes_in_group("pieces"):
		p.clicked.connect(self, "_on_piece_clicked")

func _on_piece_clicked(piece: Piece, pos: Vector2i):
	print("Clicked piece at grid coord:", pos)
	# now you know exactly where it is
You don’t need to “search” for it—GameManager gets the coord directly from the signal.

# TODO: 
	Faction Management: Right now, both player and enemy pieces are placed under separate parent nodes (PlayerPieces and EnemyPieces) for organization. However, methods like clear_board() and clear_faction_node() use get_nodes_in_group("pieces"), which actually collects all pieces from both sides. As written, clearing one faction would clear both. In a larger project you’d typically track each side’s pieces separately (e.g. with separate groups or lists) for turn management or selective removal.
